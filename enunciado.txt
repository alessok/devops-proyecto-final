===============================================================================
                           ENUNCIADO PROYECTO FINAL DE DEVOPS
===============================================================================

1. OBJETIVO GENERAL

Los alumnos deberán aplicar los conocimientos adquiridos a lo largo del curso para
realizar una propuesta completa de DevOps, tanto a nivel teórico como práctico,
sobre una aplicación web de su elección o creación.

ORGANIZACIÓN DEL TRABAJO:
• Equipos de máximo 7 integrantes y mínimo 5 integrantes
• Evaluación: 30% trabajo grupal + 70% preguntas individuales basadas en el trabajo grupal
• IMPORTANTE: Si el trabajo grupal no está desarrollado, impactará la nota individual 
  ya que no habrá preguntas que realizar por falta de trabajo que evaluar.
===============================================================================
2. TRABAJO POR REALIZAR
===============================================================================

2.1 INFORME DOCUMENTADO
------------------------

Cada equipo deberá entregar un informe técnico que incluya los siguientes apartados:

a) INTRODUCCIÓN DEL PROYECTO
   Breve descripción de la organización (real o ficticia) y del proceso que se 
   desea mejorar aplicando prácticas DevOps.

b) HISTORIAS DE USUARIO
   Definición de al menos 5 historias de usuario relevantes para la aplicación 
   desarrollada.

c) DEFINITION OF DONE (DoD)
   Criterios específicos que se deben cumplir para considerar una historia de 
   usuario o un sprint como finalizado.

d) VALUE STREAM MAPPING (VSM)
   Análisis actual del proceso (estado actual) y propuesta de optimización 
   (estado futuro) mediante un mapa de flujo de valor.

e) MODELO ORGANIZATIVO PROPUESTO
   Explicación del modelo organizativo adoptado (por ejemplo: squads, 
   comunidades de práctica, tribes) y justificación basada en el tipo de 
   proyecto o cultura organizacional.

f) ARQUITECTURA DE LA SOLUCIÓN
   Diagrama de la arquitectura general del sistema (aplicación, base de datos, 
   servicios, servidores) indicando herramientas utilizadas.

g) NIVEL DE MADUREZ DEVOPS (DSOOM)
   Evaluación del nivel de madurez alcanzado, justificando en qué dimensiones 
   del DSOOM mejoraron (por ejemplo: automatización, colaboración, seguridad).

h) RETOS Y LECCIONES APRENDIDAS
   Identificación de las principales dificultades encontradas durante la 
   implementación y cómo las resolvieron.

i) RECOMENDACIONES PARA FASES FUTURAS
   Sugerencias para mejorar o evolucionar el sistema y el proceso DevOps 
   implementado.

j) REFERENCIAS
   Fuentes bibliográficas o documentales utilizadas para sustentar el trabajo.

NOTAS IMPORTANTES PARA EL INFORME:
• El informe debe estar bien estructurado, redactado de manera clara y profesional
• Incluir gráficos, tablas, diagramas o esquemas donde sea necesario
• El documento final debe ser presentado en formato PDF

2.2 ENTREGA PRÁCTICA - REQUERIMIENTOS TÉCNICOS
----------------------------------------------

Cada equipo debe cumplir con los siguientes requerimientos técnicos:

• APLICACIÓN CON BACKEND Y FRONTEND
  ○ Desarrollar o utilizar una aplicación que cuente con al menos dos pantallas 
    (por ejemplo: login + CRUD)
  ○ El CRUD debe incluir elementos de UI como: radio buttons, checkboxes, 
    comboboxes y tablas

• COBERTURA DE CÓDIGO
  ○ Lograr una cobertura de pruebas unitarias mayor al 80% en backend

• VERSIONADO DE BASE DE DATOS
  ○ Implementar el versionado de la base de datos utilizando Flyway o alguna 
    herramienta equivalente

• COMPILACIÓN POR COMANDOS
  ○ Garantizar que tanto el backend como el frontend puedan ser compilados 
    mediante comandos

• ANÁLISIS DE CALIDAD DE CÓDIGO
  ○ Usar SonarQube o herramienta similar para asegurar que el código no 
    contenga incidencias graves de seguridad ni de alta complejidad

• DESPLIEGUE DE APLICACIÓN
  ○ Desplegar la aplicación en un servidor local (on-premise) o en la nube

• PRUEBAS DE API REST
  ○ Validar las API REST utilizando Postman u otra herramienta similar

• VERSIONADO DE ARTEFACTOS
  ○ Versionar los artefactos generados (JAR, WAR, Docker Images, etc.) en 
    Artifactory o repositorio equivalente

• PRUEBAS FUNCIONALES DE FRONTEND
  ○ Automatizar pruebas de frontend utilizando Selenium o herramienta similar

• PRUEBAS DE RENDIMIENTO
  ○ Ejecutar pruebas de rendimiento sobre las APIs utilizando JMeter o una 
    herramienta análoga

• AUTOMATIZACIÓN CI/CD
  ○ Crear un pipeline completo en Jenkins o una herramienta equivalente, 
    incluyendo los stages vistos en clase
  
  PIPELINE CI/CD REQUERIDO (basado en la imagen proporcionada):
  El pipeline debe incluir los siguientes stages en orden:
  
  1. Start
  2. Descargar Fuentes
  3. Compilar Fuentes
  4. Ejecutar Pruebas Unitarias
  5. Habilitar Entorno Pre Producción
  6. Ejecutar Pruebas Integrales
  7. Entregar Artefacto UN...
  8. Ejecutar Pruebas Funcionales
  9. Ejecutar Pruebas Rendimiento
  10. Entregar Artefacto STABLE
  11. Habilitar Entorno Producción
  12. Entregar Artefacto GOLD
  13. End

2.3 PUNTOS EXTRA (HASTA 6 PUNTOS ADICIONALES)
---------------------------------------------

Los equipos que implementen integraciones adicionales o utilicen herramientas 
distintas a las enseñadas en clase podrán obtener hasta 6 puntos extra.

EJEMPLOS DE IMPLEMENTACIONES ADICIONALES:

• Cambiar Jenkins por GitHub Actions o GitLab CI
• Utilizar Nexus en vez de Artifactory
• Desplegar la aplicación en la nube en lugar de on-premise
• Contenerizar la infraestructura usando Docker o Kubernetes
• Agregar stages adicionales en el pipeline como:
  - Notificaciones
  - Deploy canary
  - Monitoring
  - Entre otros

IMPORTANTE: Cada implementación adicional deberá estar debidamente documentada 
y justificada en el informe.

===============================================================================
3. CONSIDERACIONES Y ENTREGABLES
===============================================================================

3.1 COMPOSICIÓN DE EQUIPOS
• Máximo de integrantes por equipo: 7 alumnos
• Mínimo de integrantes por equipo: 5 alumnos

3.2 FORMATOS DE ENTREGA
• Informe técnico: Formato Word (para entrega final en PDF)
• Presentación: Formato PowerPoint
• Repositorio: Acceso a repositorio en GitHub/GitLab con toda la evidencia técnica

3.3 PRESENTACIÓN FINAL
Cada equipo deberá realizar una exposición que incluya:
• Demostración del pipeline en ejecución
• Explicación detallada del informe técnico
• Respuesta a preguntas sobre la implementación

===============================================================================
FECHA DE ENTREGA: 21 de junio de 2025
===============================================================================
