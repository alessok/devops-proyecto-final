services:
  # Jenkins para CI/CD
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      # Usamos un volumen nombrado para persistir los datos de Jenkins
      # y evitamos problemas de permisos con archivos locales.
      - jenkins_data:/var/jenkins_home
      # Montamos el socket de Docker para que Jenkins pueda ejecutar comandos de Docker
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - inventory-network
    # Hacemos que Jenkins inicie después de la base de datos
    depends_on:
      - postgres
      
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: inventory-backend
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: inventory_db
      DB_USER: inventory_user
      DB_PASS: inventory_pass
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-please-use-a-strong-random-key
      JWT_EXPIRES_IN: 24h
      API_VERSION: v1
      API_BASE_URL: /api/v1
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: inventory-frontend
    environment:
      REACT_APP_API_URL: /api/v1
      REACT_APP_APP_NAME: Sistema de Inventario
      REACT_APP_VERSION: 1.0.0
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SonarQube para análisis de código
  sonarqube:
    image: sonarqube:10.1-community
    container_name: sonarqube
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9000:9000"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - inventory-network

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - inventory-network

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - inventory-network

  # Selenium Hub para pruebas funcionales
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium-hub
    ports:
      - "4444:4444"
    environment:
      GRID_MAX_SESSION: 16
      GRID_BROWSER_TIMEOUT: 300
      GRID_TIMEOUT: 300
    networks:
      - inventory-network

  # Selenium Chrome Node
  selenium-chrome:
    image: selenium/node-chrome:4.15.0
    container_name: selenium-chrome
    environment:
      HUB_HOST: selenium-hub
      HUB_PORT: 4444
    shm_size: 2gb
    depends_on:
      - selenium-hub
    networks:
      - inventory-network

volumes:
  jenkins_data:
  postgres_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  prometheus_data:
  grafana_data:

networks:
  inventory-network:
    driver: bridge
