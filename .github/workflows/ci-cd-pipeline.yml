name: CI/CD Pipeline - DevOps Proyecto Final

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  # STAGE 1: Start
  start:
    name: "üöÄ Pipeline Start"
    runs-on: ubuntu-latest
    steps:
      - name: Pipeline Started
        run: |
          echo "=== DevOps Pipeline Started ==="
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

  # STAGE 2: Descargar Fuentes
  checkout:
    name: "üì• Descargar Fuentes"
    runs-on: ubuntu-latest
    needs: start
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            src/backend/node_modules
            src/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  # STAGE 3: Compilar Fuentes
  build:
    name: "üî® Compilar Fuentes"
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          cd src/backend && npm ci
          cd ../frontend && npm ci

      - name: Build Backend
        run: |
          cd src/backend
          npm run build

      - name: Build Frontend
        run: |
          cd src/frontend
          npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            src/backend/dist/
            src/frontend/build/

  # STAGE 4: Ejecutar Pruebas Unitarias
  unit-tests:
    name: "üß™ Ejecutar Pruebas Unitarias"
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          cd src/backend && npm ci
          cd ../frontend && npm ci

      - name: Run Backend Unit Tests
        run: |
          cd src/backend
          npm run test:coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test
          DB_PASSWORD: test

      - name: Run Frontend Unit Tests
        run: |
          cd src/frontend
          npm test -- --coverage --watchAll=false

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

  # STAGE 5: Habilitar Entorno Pre Producci√≥n
  deploy-staging:
    name: "üöß Habilitar Entorno Pre Producci√≥n"
    runs-on: ubuntu-latest
    needs: unit-tests
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Images
        run: |
          docker build -t inventory-backend:staging ./src/backend
          docker build -t inventory-frontend:staging ./src/frontend

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Aqu√≠ ir√≠a el deploy real a staging

  # STAGE 6: Ejecutar Pruebas Integrales
  integration-tests:
    name: "üîó Ejecutar Pruebas Integrales"
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Integration Tests
        run: |
          cd tests/integration
          npm ci
          npm test

  # STAGE 7: Entregar Artefacto UNSTABLE
  artifact-unstable:
    name: "üì¶ Entregar Artefacto UNSTABLE"
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Unstable Artifact
        run: |
          mkdir -p artifacts/unstable
          echo "unstable-${{ github.sha }}" > artifacts/unstable/version.txt

      - name: Upload Unstable Artifact
        uses: actions/upload-artifact@v3
        with:
          name: unstable-artifact
          path: artifacts/unstable/

  # STAGE 8: Ejecutar Pruebas Funcionales
  functional-tests:
    name: "üé≠ Ejecutar Pruebas Funcionales"
    runs-on: ubuntu-latest
    needs: artifact-unstable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Selenium Tests
        run: |
          cd tests/functional
          npm ci
          npm test

  # STAGE 9: Ejecutar Pruebas Rendimiento
  performance-tests:
    name: "‚ö° Ejecutar Pruebas Rendimiento"
    runs-on: ubuntu-latest
    needs: functional-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java for JMeter
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Run JMeter Performance Tests
        run: |
          cd tests/performance
          chmod +x run-jmeter-tests.sh
          ./run-jmeter-tests.sh

  # STAGE 10: Entregar Artefacto STABLE
  artifact-stable:
    name: "üì¶ Entregar Artefacto STABLE"
    runs-on: ubuntu-latest
    needs: performance-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Stable Artifact
        run: |
          mkdir -p artifacts/stable
          echo "stable-${{ github.sha }}" > artifacts/stable/version.txt

      - name: Upload Stable Artifact
        uses: actions/upload-artifact@v3
        with:
          name: stable-artifact
          path: artifacts/stable/

  # STAGE 11: Habilitar Entorno Producci√≥n
  deploy-production:
    name: "üöÄ Habilitar Entorno Producci√≥n"
    runs-on: ubuntu-latest
    needs: artifact-stable
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Aqu√≠ ir√≠a el deploy real a producci√≥n

  # STAGE 12: Entregar Artefacto GOLD
  artifact-gold:
    name: "üèÜ Entregar Artefacto GOLD"
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Gold Artifact
        run: |
          mkdir -p artifacts/gold
          echo "gold-${{ github.sha }}" > artifacts/gold/version.txt

      - name: Upload Gold Artifact
        uses: actions/upload-artifact@v3
        with:
          name: gold-artifact
          path: artifacts/gold/

  # STAGE 13: End
  end:
    name: "‚úÖ Pipeline End"
    runs-on: ubuntu-latest
    needs: [artifact-gold]
    if: always()
    steps:
      - name: Pipeline Completed
        run: |
          echo "=== DevOps Pipeline Completed ==="
          echo "Status: ${{ job.status }}"
          echo "All stages completed successfully!"

      - name: Notify Success
        if: success()
        run: |
          echo "üéâ Pipeline completed successfully!"
          # Aqu√≠ se pueden agregar notificaciones (Slack, Teams, etc.)

      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Pipeline failed!"
          # Aqu√≠ se pueden agregar notificaciones de error

  # Job adicional para an√°lisis de SonarQube
  sonarqube-analysis:
    name: "üîç SonarQube Analysis"
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
