name: CI/CD Pipeline - Sistema de Inventario DevOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'inventory-system'

jobs:
  # ===== ANÁLISIS DE CÓDIGO Y PRUEBAS =====
  code-quality:
    name: 🔍 Análisis de Calidad de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          src/backend/package-lock.json
          src/frontend/package-lock.json

    # Backend - Análisis de código
    - name: 📦 Instalar dependencias Backend
      working-directory: ./src/backend
      run: npm ci

    - name: 🧪 Ejecutar tests unitarios Backend
      working-directory: ./src/backend
      run: npm run test:ci || true

    - name: 📊 Ejecutar coverage Backend
      working-directory: ./src/backend
      run: npm run test:coverage || true

    - name: 🔍 Lint Backend
      working-directory: ./src/backend
      run: npm run lint || true

    # Frontend - Análisis de código
    - name: 📦 Instalar dependencias Frontend
      working-directory: ./src/frontend
      run: npm ci

    - name: 🧪 Ejecutar tests unitarios Frontend
      working-directory: ./src/frontend
      run: npm run test:ci || true

    - name: 🏗️ Build Frontend
      working-directory: ./src/frontend
      run: npm run build

    - name: 🔍 Lint Frontend
      working-directory: ./src/frontend
      run: npm run lint || true

    # SonarQube Analysis
    - name: 📈 Análisis SonarQube
      uses: sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      continue-on-error: true

  # ===== CONSTRUCCIÓN DE IMÁGENES DOCKER =====
  build-images:
    name: 🐳 Construcción de Imágenes Docker
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login al Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extraer metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build y Push imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: ./src/${{ matrix.component }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== PRUEBAS DE INTEGRACIÓN =====
  integration-tests:
    name: 🧪 Pruebas de Integración
    runs-on: ubuntu-latest
    needs: build-images
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Instalar dependencias Backend
      working-directory: ./src/backend
      run: npm ci

    - name: 🧪 Ejecutar pruebas de integración
      working-directory: ./src/backend
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NODE_ENV: test

    - name: 📊 Generar reporte de cobertura
      working-directory: ./src/backend
      run: npm run test:coverage

    - name: 📤 Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # ===== PRUEBAS E2E CON SELENIUM =====
  e2e-tests:
    name: 🎭 Pruebas End-to-End
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Compose
      run: |
        docker compose version

    - name: 🚀 Levantar servicios para E2E
      run: |
        docker compose up -d --wait
        sleep 30  # Esperar que todos los servicios estén listos

    - name: 🔍 Verificar servicios
      run: |
        docker compose ps
        curl -f http://localhost:3000 || exit 1
        curl -f http://localhost:3002/health || exit 1

    - name: 🟢 Setup Node.js para pruebas E2E
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Instalar dependencias E2E
      working-directory: ./tests/e2e
      run: npm ci

    - name: 🎭 Ejecutar pruebas E2E
      working-directory: ./tests/e2e
      run: npm test
      env:
        SELENIUM_URL: http://localhost:4444/wd/hub
        FRONTEND_URL: http://localhost:3000

    - name: 📸 Guardar screenshots en caso de fallo
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-screenshots
        path: ./tests/e2e/screenshots/

    - name: 📋 Mostrar logs en caso de fallo
      if: failure()
      run: |
        docker compose logs backend
        docker compose logs frontend

    - name: 🛑 Limpiar servicios
      if: always()
      run: docker compose down -v

  # ===== ANÁLISIS DE SEGURIDAD =====
  security-scan:
    name: 🔒 Análisis de Seguridad
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔍 Escaneo de vulnerabilidades con Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Subir resultados a GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔐 Escaneo de secretos
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # ===== DESPLIEGUE =====
  deploy:
    name: 🚀 Despliegue
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://inventory-system.example.com
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔐 Configurar acceso al servidor
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: 🚀 Desplegar a producción
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
          cd /opt/inventory-system &&
          git pull origin main &&
          docker compose pull &&
          docker compose up -d --remove-orphans &&
          docker system prune -f
        '

    - name: 🔍 Verificar despliegue
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

    - name: 📊 Notificar a Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ===== MONITOREO POST-DESPLIEGUE =====
  health-check:
    name: 🏥 Verificación de Salud
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🔍 Health Check API
      run: |
        for i in {1..10}; do
          if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
            echo "✅ API está funcionando"
            break
          else
            echo "⏳ Intento $i/10 - API no disponible, esperando..."
            sleep 30
          fi
        done

    - name: 📊 Verificar métricas
      run: |
        curl -f ${{ secrets.PRODUCTION_URL }}/metrics

    - name: 🚨 Crear issue si falla
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Fallo en Health Check Post-Despliegue',
            body: 'El health check ha fallado después del despliegue. Revisar logs y estado de la aplicación.',
            labels: ['bug', 'urgent', 'production']
          })
